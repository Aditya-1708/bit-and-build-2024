generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  name             String?
  wardrobeItems    WardrobeItem[]
  outfits          Outfit[]
  itemUsages       ItemUsage[]
  marketplaceItems MarketplaceItem[] // Relation to MarketplaceItem
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model WardrobeItem {
  id              Int               @id @default(autoincrement())
  user            User              @relation(fields: [userId], references: [id])
  userId          Int
  name            String
  category        String
  occasion        String            @default("casual")
  type            String            @default("none")
  color           String?
  imageUrl        String?
  description     String?
  count           Int               @default(0)
  tags            ItemTag[]
  lastWorn        DateTime?
  outfitItems     OutfitItem[]
  usageLogs       ItemUsage[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  MarketplaceItem MarketplaceItem[]
}

model ItemTag {
  id             Int          @id @default(autoincrement())
  wardrobeItem   WardrobeItem @relation(fields: [wardrobeItemId], references: [id])
  wardrobeItemId Int
  tag            String
}

model Outfit {
  id          Int          @id @default(autoincrement())
  user        User         @relation(fields: [userId], references: [id])
  userId      Int
  name        String
  description String?
  outfitItems OutfitItem[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model OutfitItem {
  id             Int          @id @default(autoincrement())
  outfit         Outfit       @relation(fields: [outfitId], references: [id])
  outfitId       Int
  wardrobeItem   WardrobeItem @relation(fields: [wardrobeItemId], references: [id])
  wardrobeItemId Int
}

model ItemUsage {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  wardrobeItem   WardrobeItem @relation(fields: [wardrobeItemId], references: [id])
  wardrobeItemId Int
  wornAt         DateTime     @default(now())
}

model MarketplaceItem {
  id              Int                   @id @default(autoincrement())
  wardrobeItem    WardrobeItem          @relation(fields: [wardrobeItemId], references: [id])
  wardrobeItemId  Int
  user            User                  @relation(fields: [userId], references: [id])
  userId          Int
  price           Float?
  rentalPrice     Float?
  status          MarketplaceItemStatus @default(ACTIVE) // Updated enum name
  transactionType MarketplaceType // ENUM for 'SELL', 'RENT', 'DONATE'
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
}

enum MarketplaceType {
  SELL
  RENT
  DONATE
}

enum MarketplaceItemStatus {
  ACTIVE
  INACTIVE
  SOLD
  RENTED
  DONATED
}
